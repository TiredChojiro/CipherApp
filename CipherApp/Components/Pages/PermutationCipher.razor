@page "/PermutationCipher"
@rendermode InteractiveServer

<PageTitle>Permutation Cipher</PageTitle>


<h3>Permutation Cipher</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

<div class="form-group mb-3">
    <label for="text" class="form-label">Введите текст:</label>
    <input class="form-control" placeholder="Текст" @bind="text" />
</div>

<div class="form-group mb-3">
    <label for="permutationKey" class="form-label">Введите ключ:</label>
    <input class="form-control" placeholder="Ключ" @bind="permutationKeyString" />
</div>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="EncryptText">Зашифровать</button>
    <button class="btn btn-primary" @onclick="DecryptText">Расшифровать</button>
</div>

<div class="form-group mb-3">
    <label for="ciphertext" class="form-label">Результат:</label>
    <textarea class="form-control" rows="1" readonly>@result> </textarea>
</div>

@code {
    string text = "";
    string permutationKeyString = "";
    string result = "";
    string errorMessage = "";

    void EncryptText()
    {
        try
        {
            int[] permutationKey = permutationKeyString.Split(',').Select(int.Parse).ToArray();
            result = CipherApp.Ciphers.PermutationCipher.Encrypt(text, permutationKey);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    void DecryptText()
    {
        try
        {
            int[] permutationKey = permutationKeyString.Split(',').Select(int.Parse).ToArray();
            result = CipherApp.Ciphers.PermutationCipher.Decrypt(text, permutationKey);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}